/* Node Wrapper */
.nodeWrapper {
    position: relative;
    padding: 8px;
    border-radius: 8px;
    backdrop-filter: blur(8px);
    transition: all 0.2s ease;
}

/* Handles Wrapper */
.handlesWrapper {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    align-items: stretch;
    min-height: 40px;
    margin: -4px 0;
}

/* Handles Columns */
.handlesColumn {
    display: flex;
    flex-direction: column;
    gap: 12px;
    padding: 8px 0;
    min-width: 40px;
}

.inputHandlesColumn {
    margin-right: 8px;
}

.outputHandlesColumn {
    margin-left: 8px;
}

/* Handle Row */
.handleRow {
    position: relative;
    display: flex;
    align-items: center;
    height: 32px;
    padding: 0 4px;
    border-radius: 6px;
    transition: all 0.2s ease;
}



/* Handle Cell */
.handleCell {
    position: relative;
    width: 24px;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
}

.inputHandleCell {
    justify-content: flex-start;
}

.outputHandleCell {
    justify-content: flex-end;
}

/* Handle Label Cell */
.handleLabelCell {
    display: flex;
    align-items: center;
}

.inputHandlesColumn .handleLabelCell {
    margin-left: 0.5rem;
}

.outputHandlesColumn .handleLabelCell {
    margin-right: 0.5rem;
}

/* Handle Label */
.handleLabel {
    font-size: 1rem;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    max-width: 100%;
    display: block;
    z-index: 1000;
}

/* Handle */
.handle {
    width: 0.8rem !important;
    height: 0.8rem !important;
    background: #555 !important;
    position: relative;
    z-index: 1001 !important;
    top: auto;
    right: auto;
    transform: none;
}

.handle:hover {
    background-color: #777;
}

/* Left and Right Handles */
.handleLeft {
    left: 0;
}

.handleRight {
    right: 0;
}

/* Collapsed Handles */
.collapsedHandleInput {
    position: absolute !important;
    top: 50% !important;
    left: 0 !important;
    transform: translateY(-50%) !important;
}

.collapsedHandleOutput {
    position: absolute !important;
    top: 50% !important;
    right: 4px !important;
    transform: translateY(-50%) !important;
}

/* Dynamic Node Wrapper */
.dynamicNodeWrapper {
    position: relative;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

/* Adjustments for Conditional Node */
.RouterNode {
    background-color: #e0f7fa;
}